name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: x86_64-apple-darwin
            os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: devx-macos-x64
            file_extension: .app
            bundle_type: app
            dmg_extension: .dmg
          - platform: aarch64-apple-darwin
            os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: devx-macos-arm64
            file_extension: .app
            bundle_type: app
            dmg_extension: .dmg
          - platform: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: devx-linux-x64
            file_extension: .AppImage
            bundle_type: appimage
            dmg_extension: ""
          - platform: x86_64-pc-windows-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: devx-windows-x64
            file_extension: .msi
            bundle_type: msi
            dmg_extension: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          target: ${{ matrix.target }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm build

      - name: Setup macOS signing (macOS only)
        if: matrix.os == 'macos-latest'
        uses: apple-actions/import-codesigning-certs@v1
        with:
          p12-file-base64: ${{ secrets.MACOS_P12_BASE64 }}
          p12-password: ${{ secrets.MACOS_P12_PASSWORD }}

      - name: Setup App Store Connect API (macOS only)
        if: matrix.os == 'macos-latest'
        uses: apple-actions/app-store-connect-api@v1
        with:
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

      - name: Setup Provision Profile (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          if [ -n "${{ secrets.MACOS_PROVISION_PROFILE_BASE64 }}" ]; then
            echo "设置 provision profile..."
            echo "${{ secrets.MACOS_PROVISION_PROFILE_BASE64 }}" | base64 -d > src-tauri/embedded.provisionprofile
            echo "✅ Provision profile 设置成功"
          else
            echo "⚠️ 未找到 provision profile，使用默认配置"
            chmod +x scripts/setup-provision-profile.sh
            ./scripts/setup-provision-profile.sh "${{ secrets.APPLE_TEAM_ID }}"

      - name: Build Tauri application
        run: pnpm tauri build --target ${{ matrix.target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.MACOS_P12_BASE64 }}
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_P12_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Verify signing (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          echo "验证应用签名..."
          codesign -dv --verbose=4 "src-tauri/target/${{ matrix.target }}/release/bundle/app/DevX.app"

      - name: Notarize macOS app (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          xcrun notarytool submit \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_ID_PASS }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            "src-tauri/target/${{ matrix.target }}/release/bundle/app/DevX.app" \
            --wait

      - name: Staple notarization (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          xcrun stapler staple "src-tauri/target/${{ matrix.target }}/release/bundle/app/DevX.app"

      - name: Upload app artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-app
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/${{ matrix.bundle_type }}/
          retention-days: 1

      - name: Upload DMG artifacts (macOS only)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-dmg
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/
          retention-days: 1

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## DevX ${{ steps.get_version.outputs.version }}
            
            ### Downloads
            
            #### Windows
            - **Windows (x64)**: `devx-windows-x64.msi`
            
            #### macOS
            - **macOS (Intel)**: `devx-macos-x64.dmg` - 已签名和公证
            - **macOS (Apple Silicon)**: `devx-macos-arm64.dmg` - 已签名和公证
            
            #### Linux
            - **Linux (x64)**: `devx-linux-x64.AppImage`
            
            ### Changes
            
            See the [changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          draft: false
          prerelease: false
          files: |
            artifacts/devx-windows-x64-msi/*.msi
            artifacts/devx-macos-x64-dmg/*.dmg
            artifacts/devx-macos-arm64-dmg/*.dmg
            artifacts/devx-linux-x64-appimage/*.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 